(:summary    "Auto Java Completion fo GNU Emacs"
 :repository (git . "https://github.com/jixiuf/ajc-java-complete.git")
 :created    "2010"
 :updated    "2010"
 :license    "GPL-2"
 :provided   (ajc-java-complete ajc-java-complete-config)
 :required   ((("auto-complete" auto-complete)
	       ("yasnippet" yasnippet)))
 :homepage   "https://github.com/jixiuf/ajc-java-complete"
 :wikipage   "http://www.emacswiki.org/AutoJavaComplete"
 :commentary "\
1. it depends on auto complete ,so it would complete
  everything by dropdowning a menu.

2. it is tag based . so before you used it on emacs ,you
  should generate a tag file by using Tags.java .
  about how to use it ,see the Install section.

3. it depends on yasnippet . when completing method and
  constructor it would generate a templete dynamically
  so that you can jump from a paramter to another one .

4. when completing method ,it can show return type behind
  each candidate on dropdown menu. but there is a problem:
  because auto complete 1.3 now would treat all the string
  on the dropdown-menu row as the candidates ,so I must
  find a way to delete the return type string . I use the
  'action' property of ac-source to do it. so you need
  always  press <RET> to active the 'action function'
  you can choose do not showing return type by customing
  ajc-show-more-info-when-complete-class-and-method  .

}}}

{{{ Features 
Features

1. support importing.
   when you type in  import javax.s
   it would drop down a menu like this
              import  javax.s
                      javax.sql
                      javax.swing
                      javax.sound
                      
2. support import class with keybindings
        auto import all Class in source file

   (local-set-key (kbd \"C-c i\") (quote ajc-import-all-unimported-class))
        import Class where under point 
   (local-set-key (kbd \"C-c m\") (quote ajc-import-class-under-point))


3. support completing class name ,you just need  typing
   in a Word beginning with [A-Z] ,then it would auto find
   matched class and list it with dropdown menu.


4. support complete method.
   for example
   List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
        list.

   it would list all method like this
        list.
             equals(Object)
             add(Object)
             clear()

   it can do more
        list.listIterator().next().
                                     toString()
                                     getClass()
                                     notify()")
