(:summary    "Clickable buttons in header lines"
 :repository (git . "git://github.com/tarsius/header-button.git")
 :created    "20100604"
 :updated    "20101218"
 :license    "GPL-3"
 :authors    (("Jonas Bernoulli" . "jonas@bernoul.li"))
 :maintainer ("Jonas Bernoulli" . "jonas@bernoul.li")
 :provided   (header-button)
 :required   ((("emacs-core" button)))
 :keywords   (extensions)
 :homepage   "https://github.com/tarsius/header-button"
 :commentary "\
This package extends `button' by adding support for adding buttons to
the header line.  Since the header line is very limited compared to a
buffer most of the functionality provided by `button' is not available
for buttons in the header line.

While `button' provides the function `insert-button' (as well as
others) to insert a button into a buffer at point, something similar
can't be done here, due to the lack of point in header lines.

Instead us `format-header-button' like this:

(setq header-line-format
      (concat \"Here's a button: \"
              (format-header-button \"Click me!\" :action 'my-action)))

Like with `button' you can create your own derived button types:

(define-button-type 'my-header
  :supertype 'header
  :action 'my-action)

(setq header-line-format
      (concat (format-header-button \"Click me!\" :action 'my-action) \" \"
              (format-header-button \"No me!\" :type 'my-header)))

The function associated with `:action' is called with the button plist
as only argument.  Do no use `plist-get' to extract a value from it.
Instead use `header-button-get' which will also extract values stored
in it's type.

(defun my-action (button)
  (message \"This button labeled `%s' belongs to category `%s'\"
           (header-button-label button)
           (header-button-get button 'category)))")
