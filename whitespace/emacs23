(:summary    "Minor mode to visualize TAB, (HARD) SPACE, NEWLINE"
 :created    "2000"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Vinicius Jose Latorre" . "viniciusjl@ig.com.br"))
 :maintainer ("Vinicius Jose Latorre" . "viniciusjl@ig.com.br")
 :provided   (whitespace)
 :keywords   (data wp)
 :wikipage   "http://www.emacswiki.org/WhiteSpace"
 :commentary "\
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Introduction
------------

This package is a minor mode to visualize blanks (TAB, (HARD) SPACE
and NEWLINE).

whitespace uses two ways to visualize blanks: faces and display
table.

* Faces are used to highlight the background with a color.
  whitespace uses font-lock to highlight blank characters.

* Display table changes the way a character is displayed, that is,
  it provides a visual mark for characters, for example, at the end
  of line (?\\xB6), at SPACEs (?\\xB7) and at TABs (?\\xBB).

The `whitespace-style' variable selects which way blanks are
visualized.

Note that when whitespace is turned on, whitespace saves the
font-lock state, that is, if font-lock is on or off.  And
whitespace restores the font-lock state when it is turned off.  So,
if whitespace is turned on and font-lock is off, whitespace also
turns on the font-lock to highlight blanks, but the font-lock will
be turned off when whitespace is turned off.  Thus, turn on
font-lock before whitespace is on, if you want that font-lock
continues on after whitespace is turned off.

When whitespace is on, it takes care of highlighting some special
characters over the default mechanism of `nobreak-char-display'
(which see) and `show-trailing-whitespace' (which see).

The trailing spaces are not highlighted while point is at end of line.
Also the spaces at beginning of buffer are not highlighted while point is at
beginning of buffer; and the spaces at end of buffer are not highlighted
while point is at end of buffer.

There are two ways of using whitespace: local and global.

* Local whitespace affects only the current buffer.

* Global whitespace affects all current and future buffers.  That
  is, if you turn on global whitespace and then create a new
  buffer, the new buffer will also have whitespace on.  The
  `whitespace-global-modes' variable controls which major-mode will
  be automagically turned on.

You can mix the local and global usage without any conflict.  But
local whitespace has priority over global whitespace.  Whitespace
mode is active in a buffer if you have enabled it in that buffer or
if you have enabled it globally.

When global and local whitespace are on:

* if local whitespace is turned off, whitespace is turned off for
  the current buffer only.

* if global whitespace is turned off, whitespace continues on only
  in the buffers in which local whitespace is on.

To use whitespace, insert in your ~/.emacs:

   (require 'whitespace)

Or autoload at least one of the commands`whitespace-mode',
`whitespace-toggle-options', `global-whitespace-mode' or
`global-whitespace-toggle-options'.  For example:

   (autoload 'whitespace-mode           \"whitespace\"
     \"Toggle whitespace visualization.\"        t)
   (autoload 'whitespace-toggle-options \"whitespace\"
     \"Toggle local `whitespace-mode' options.\" t)

whitespace was inspired by:

   whitespace.el            Rajesh Vaidheeswarran <rv@gnu.org>
	Warn about and clean bogus whitespaces in the file
	(inspired the idea to warn and clean some blanks)
	This was the original `whitespace.el' which was replaced by
	`blank-mode.el'.  And later `blank-mode.el' was renamed to
	`whitespace.el'.

   show-whitespace-mode.el  Aurelien Tisne <aurelien.tisne@free.fr>
      Simple mode to highlight whitespaces
      (inspired the idea to use font-lock)

   whitespace-mode.el       Lawrence Mitchell <wence@gmx.li>
      Major mode for editing Whitespace
      (inspired the idea to use display table)

   visws.el                 Miles Bader <miles@gnu.org>
      Make whitespace visible
      (handle display table, his code was modified, but the main
      idea was kept)


Using whitespace
----------------

There is no problem if you mix local and global minor mode usage.

* LOCAL whitespace:
   + To toggle whitespace options locally, type:

        M-x whitespace-toggle-options RET

   + To activate whitespace locally, type:

        C-u 1 M-x whitespace-mode RET

   + To deactivate whitespace locally, type:

        C-u 0 M-x whitespace-mode RET

   + To toggle whitespace locally, type:

        M-x whitespace-mode RET

* GLOBAL whitespace:
   + To toggle whitespace options globally, type:

        M-x global-whitespace-toggle-options RET

   + To activate whitespace globally, type:

        C-u 1 M-x global-whitespace-mode RET

   + To deactivate whitespace globally, type:

        C-u 0 M-x global-whitespace-mode RET

   + To toggle whitespace globally, type:

        M-x global-whitespace-mode RET

There are also the following useful commands:

`whitespace-newline-mode'
   Toggle NEWLINE minor mode visualization (\"nl\" on modeline).

`global-whitespace-newline-mode'
   Toggle NEWLINE global minor mode visualization (\"NL\" on modeline).

`whitespace-report'
   Report some blank problems in buffer.

`whitespace-report-region'
   Report some blank problems in a region.

`whitespace-cleanup'
   Cleanup some blank problems in all buffer or at region.

`whitespace-cleanup-region'
   Cleanup some blank problems at region.

The problems, which are cleaned up, are:

1. empty lines at beginning of buffer.
2. empty lines at end of buffer.
   If `whitespace-style' includes the value `empty', remove all
   empty lines at beginning and/or end of buffer.

3. 8 or more SPACEs at beginning of line.
   If `whitespace-style' includes the value `indentation':
   replace 8 or more SPACEs at beginning of line by TABs, if
   `indent-tabs-mode' is non-nil; otherwise, replace TABs by
   SPACEs.
   If `whitespace-style' includes the value `indentation::tab',
   replace 8 or more SPACEs at beginning of line by TABs.
   If `whitespace-style' includes the value `indentation::space',
   replace TABs by SPACEs.

4. SPACEs before TAB.
   If `whitespace-style' includes the value `space-before-tab':
   replace SPACEs by TABs, if `indent-tabs-mode' is non-nil;
   otherwise, replace TABs by SPACEs.
   If `whitespace-style' includes the value
   `space-before-tab::tab', replace SPACEs by TABs.
   If `whitespace-style' includes the value
   `space-before-tab::space', replace TABs by SPACEs.

5. SPACEs or TABs at end of line.
   If `whitespace-style' includes the value `trailing', remove all
   SPACEs or TABs at end of line.

6. 8 or more SPACEs after TAB.
   If `whitespace-style' includes the value `space-after-tab':
   replace SPACEs by TABs, if `indent-tabs-mode' is non-nil;
   otherwise, replace TABs by SPACEs.
   If `whitespace-style' includes the value `space-after-tab::tab',
   replace SPACEs by TABs.
   If `whitespace-style' includes the value
   `space-after-tab::space', replace TABs by SPACEs.


Hooks
-----

whitespace has the following hook variables:

`whitespace-mode-hook'
   It is evaluated always when whitespace is turned on locally.

`global-whitespace-mode-hook'
   It is evaluated always when whitespace is turned on globally.

`whitespace-load-hook'
   It is evaluated after whitespace package is loaded.


Options
-------

Below it's shown a brief description of whitespace options, please,
see the options declaration in the code for a long documentation.

`whitespace-style'		Specify which kind of blank is
				visualized.

`whitespace-space'		Face used to visualize SPACE.

`whitespace-hspace'		Face used to visualize HARD SPACE.

`whitespace-tab'		Face used to visualize TAB.

`whitespace-newline'		Face used to visualize NEWLINE char
				mapping.

`whitespace-trailing'	Face used to visualize trailing
				blanks.

`whitespace-line'		Face used to visualize \"long\" lines.

`whitespace-space-before-tab'	Face used to visualize SPACEs
					before TAB.

`whitespace-indentation'	Face used to visualize 8 or more
				SPACEs at beginning of line.

`whitespace-empty'		Face used to visualize empty lines at
				beginning and/or end of buffer.

`whitespace-space-after-tab'	Face used to visualize 8 or more
				SPACEs after TAB.

`whitespace-space-regexp'	Specify SPACE characters regexp.

`whitespace-hspace-regexp'	Specify HARD SPACE characters regexp.

`whitespace-tab-regexp'	Specify TAB characters regexp.

`whitespace-trailing-regexp'	Specify trailing characters regexp.

`whitespace-space-before-tab-regexp'	Specify SPACEs before TAB
					regexp.

`whitespace-indentation-regexp'	Specify regexp for 8 or more
					SPACEs at beginning of line.

`whitespace-empty-at-bob-regexp'	Specify regexp for empty lines
					at beginning of buffer.

`whitespace-empty-at-eob-regexp'	Specify regexp for empty lines
					at end of buffer.

`whitespace-space-after-tab-regexp'	Specify regexp for 8 or more
					SPACEs after TAB.

`whitespace-line-column'	Specify column beyond which the line
				is highlighted.

`whitespace-display-mappings'	Specify an alist of mappings
					for displaying characters.

`whitespace-global-modes'	Modes for which global
				`whitespace-mode' is automagically
				turned on.

`whitespace-action'		Specify which action is taken when a
				buffer is visited or written.


Acknowledgements
----------------

Thanks to David Reitter <david.reitter@gmail.com> for suggesting a
`whitespace-newline' initialization with low contrast relative to
the background color.

Thanks to Stephen Deasey <sdeasey@gmail.com> for the
`indent-tabs-mode' usage suggestion.

Thanks to Eric Cooper <ecc@cmu.edu> for the suggestion to have hook
actions when buffer is written as the original whitespace package
had.

Thanks to nschum (EmacsWiki) for the idea about highlight \"long\"
lines tail.  See EightyColumnRule (EmacsWiki).

Thanks to Juri Linkov <juri@jurta.org> for suggesting:
   * `define-minor-mode'.
   * `global-whitespace-*' name for global commands.

Thanks to Robert J. Chassell <bob@gnu.org> for doc fix and testing.

Thanks to Drew Adams <drew.adams@oracle.com> for toggle commands
suggestion.

Thanks to Antti Kaihola <antti.kaihola@linux-aktivaattori.org> for
helping to fix `find-file-hooks' reference.

Thanks to Andreas Roehler <andreas.roehler@easy-emacs.de> for
indicating defface byte-compilation warnings.

Thanks to TimOCallaghan (EmacsWiki) for the idea about highlight
\"long\" lines.  See EightyColumnRule (EmacsWiki).

Thanks to Yanghui Bian <yanghuibian@gmail.com> for indicating a new
NEWLINE character mapping.

Thanks to Pete Forman <pete.forman@westgeo.com> for indicating
whitespace-mode.el on XEmacs.

Thanks to Miles Bader <miles@gnu.org> for handling display table via
visws.el (his code was modified, but the main idea was kept).

Thanks to:
   Rajesh Vaidheeswarran <rv@gnu.org>	(original) whitespace.el
   Aurelien Tisne <aurelien.tisne@free.fr>	show-whitespace-mode.el
   Lawrence Mitchell <wence@gmx.li>		whitespace-mode.el
   Miles Bader <miles@gnu.org>		visws.el
And to all people who contributed with them.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")
