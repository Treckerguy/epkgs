(:summary    "Read multiple strings with completion"
 :created    "1985"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Sen Nagata" . "sen@eccosys.com"))
 :maintainer ("Sen Nagata" . "sen@eccosys.com")
 :provided   (crm)
 :keywords   ("completion" "minibuffer" "multiple" "elements")
 :commentary "\
This code defines a function, `completing-read-multiple', which
provides the ability to read multiple strings in the minibuffer,
with completion.

By using this functionality, a user may specify multiple strings at
a single prompt, optionally using completion.

Multiple strings are specified by separating each of the strings
with a prespecified separator character.  For example, if the
separator character is a comma, the strings 'alice', 'bob', and
'eve' would be specified as 'alice,bob,eve'.

The default value for the separator character is the value of
`crm-default-separator' (comma).  The separator character may be
changed by modifying the value of `crm-separator'.

Contiguous strings of non-separator-characters are referred to as
'elements'.  In the aforementioned example, the elements are:
'alice', 'bob', and 'eve'.

Completion is available on a per-element basis.  For example, if
the contents of the minibuffer are 'alice,bob,eve' and point is
between 'l' and 'i', pressing TAB operates on the element 'alice'.

For the moment, I have decided to not bind any special behavior to
the separator key.  In the future, the separator key might be used
to provide completion in certain circumstances.  One of the reasons
why this functionality is not yet provided is that it is unclear to
the author what the precise circumstances are, under which
separator-invoked completion should be provided.

Design note: `completing-read-multiple' is modeled after
`completing-read'.  They should be similar -- it was intentional.

Some of this code started out as translation from C code in
src/minibuf.c to Emacs Lisp code.  After this code was rewritten in Elisp
and made to operate on any field, this file was completely rewritten to
just reuse that code.

Thanks to Sen Nagata <sen@eccosys.com> for the original version of the
code, and sorry for throwing it all out.  --Stef

Thanks to Richard Stallman for all of his help (many of the good
ideas in here are from him), Gerd Moellmann for his attention,
Stefan Monnier for responding with a code sample and comments very
early on, and Kai Grossjohann & Soren Dayton for valuable feedback.

Questions and Thoughts:

-should `completing-read-multiple' allow a trailing separator in
a return value when REQUIRE-MATCH is t?  if not, should beep when a user
tries to exit the minibuffer via RET?

-tip: use M-f and M-b for ease of navigation among elements.

- the difference between minibuffer-completion-table and
  crm-completion-table is just crm--collection-fn.  In most cases it
  shouldn't make any difference.  But if a non-CRM completion function
  happens to be used, it will use minibuffer-completion-table and
  crm--collection-fn will try to make it do \"more or less the right
  thing\" by making it complete on the last element, which is about as
  good as we can hope for right now.
  I'm not sure if it's important or not.  Maybe we could just throw away
  crm-completion-table and crm--collection-fn, but there doesn't seem to
  be a pressing need for it, and since Sen did bother to write it, we may
  as well keep it, in case it helps.")
