(:summary    "Incremental X minor mode"
 :created    "20101011"
 :updated    "2010"
 :license    "GPL-3"
 :authors    (("Paul M. Rodriguez" . "paulmrodriguez@gmail.com"))
 :maintainer ("Paul M. Rodriguez" . "paulmrodriguez@gmail.com")
 :provided   (iread)
 :required   ((("emacs" cl)))
 :homepage   "http://gopher.ruricolist.com:70/lisp/"
 :wikipage   "http://www.emacswiki.org/IncrementalRead"
 :commentary "\
Iread is Isearch without the search---a framework for acting
incrementally on user input.  It is implemented as a minor mode,
with a number of normal and abnormal hooks.  But all the moving
parts are encased by the function `iread', which lets you build up
incremental read functionality by passing keyword arguments.

To get a sense for how it works, try calling `iread-mode' directly.
A prompt appears in the minibuffer.  Type something and it appears
after the prompt.  Any event that is not a printable character
exits.  Iread is just a skeleton; but one with many points of
attachment.

Here are the parameters to `iread' and the variables they bind.

PROMPT, a required argument, binds `iread-prompt'.  This is the
prompt that `iread-mode' displays.

VAR, a required argument, specifies a symbol to use as an argument
when constructing functions.  If VAR is nil, you can pass only
functions and lists of functions to a parameter that binds an
abnormal hook.  But if VAR is a symbol, you can also pass a quoted
form to use as the body of a function.  The quoted form is wrapped
in a function with VAR as its single argument.
For example,
   (iread \"Don't: \" 'var :do '(ignore var))
Is equivalent to:
   (iread \"Don't: \" nil :do (lambda (var) (ignore var)))

LIGHTER binds `iread-lighter'.  This is the string to display in
the modeline while `iread-mode' is on.

INPUT binds `iread-input'---an initial input.

DEFAULT is a local binding.  If the user does not type anything,
this is the value to return.

DO binds `iread-after-input-functions', an abnormal hook.  The
functions in this hook are called with one argument, the
current value of `iread-input'.

KEYMAP is a keymap containing additional keybindings to use while
`iread-mode' is on.  You can provide either a keymap as such, or as
a list in the format that `easy-mmode-define-keymap' expects.

(The keymap is copied, and the copy has its parent set to
`iread-mode-map'.)

FIRST binds `iread-mode-on-hook', a normal hook to run
when `iread-mode' turns on.

UNTIL binds `iread-end-test-functions', an abnormal hook.  The
functions in this hook are called with the current value of
`iread-input'.  If any function returns non-nil then `iread-mode'
is turned off and `iread' peremptorily returns.

UNLESS binds `iread-fail-test-functions', another abnormal hook.
When a function in this hook returns non-nil, it prevents
`iread-after-input-functions' from being run.  It also sets
`iread-fail-prefix', so further input (input for which
`iread-fail-prefix' satisfied `string-prefix-p') can be disregarded
without testing.

DELAY binds `iread-delay'.  This is the number of seconds to wait
after input before running `iread-after-input-functions'.

MIN binds `iread-delay'.  `iread-after-input-functions' will not be
run unless `iread-input' is longer than MIN.  Note that the default
value is 0, meaning that nothing is done until something is
actually typed; if you want `iread-after-input-functions' to be run
as soon as `iread-mode' starts---or if the user deletes all
input---then you must set MIN to -1.

LAST binds `iread-mode-off-hook', a normal hook run when
`iread-mode' turns off.

RETURN is a local binding.  If a function is passed as RETURN then
this function will be called with `iread-input' and its return
value will be the return value of `iread'.  For example,
   (iread \"Characters: \" nil :return 'string-to-list)
Is equivalent to:
   (string-to-list (iread \"Characters: \" nil))

N.  B.  The call to `iread-mode' is wrapped with the tag 'iread.
You can throw to this tag at any time; `iread-input' will be set to
the value of the throw.  This does not exit `iread' itself; LAST
and RETURN will still be run.")
