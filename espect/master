(:summary    "Aspect-oriented buffer settings"
 :repository (git . "https://github.com/rafl/espect.git")
 :license    "GPL-2"
 :provided   (espect)
 :homepage   "https://github.com/rafl/espect"
 :wikipage   "http://www.emacswiki.org/Espect"
 :commentary "\
This software is Copyright (c) 2010 by Florian Ragwitz, Rohn Jockway

This is free software, licensed under:

 The GNU General Public License, Version 2, June 1991

This mode makes it easy to configure settings for individual
buffers with a concice and extensible mini-language.  It abstracts
away common configuration selection tasks, like checking the mode
or filename, into a simple declarative syntax.  Declare conditions;
run a function when the new buffer matches them.  This makes it
easy to do things like turn on flyspell-prog-mode for your favorite
programming languages, or make all text-mode buffers ending in .mkn
have special properties.

Additionally, the mini-language is extensible, so you can define
and use your own tests.  espect's \"built-in\" rules use the
extension mechanism, so your rules need not be second-class
citizens.

Example configuration:

(setq espect-buffer-settings
      '(((:not (:mode \"^gnus\") (:mode w3m-mode) (:mode \"^erc\")
               (:mode eshell-mode) (:mode term-mode) (:mode gud-mode))
         (lambda () nil))
        ((:not (:mode eshell-mode) (:mode term-mode))
         (lambda () (hl-line-mode t)))
        ((:mode message-mode)
         (:mode org-mode)
         (:mode pod-mode)
         (:mode markdown-mode)
         (:mode git-commit-mode)
         (:filename \"\\\\.\\\\(txt\\\\|mkn\\\\)$\")
         (lambda ()
           (flyspell-mode 1)
           (auto-fill-mode 1)))
        ((:mode c-mode)
         (:mode cperl-mode)
         (:mode emacs-lisp-mode)
         (lambda ()
           (flyspell-prog-mode)))
        ((:project \"perl\")
         (lambda ()
           (when (save-excursion
                   (goto-char (point-min))
                   (re-search-forward \"\\t\" nil t))
             (setq
              tab-width 8
              indent-tabs-mode t))))
        ((:project \"Sub-Name\")
         (lambda ()
           (setq
            tab-width 8
            indent-tabs-mode t
            c-basic-offset 8)))
        ((:project \"Memoize\")
         (lambda ()
           (setq
            tab-width 8
            indent-tabs-mode t)))
        ((:project \"gnus\")
         (lambda ()
           (setq tab-width 8)))))")
