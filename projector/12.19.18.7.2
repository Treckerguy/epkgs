(:summary    "Projects in an Emacs idiom"
 :created    "20091211"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Paul M. Rodriguez" . "pmr@ruricolist.com"))
 :maintainer ("Paul M. Rodriguez" . "pmr@ruricolist.com")
 :provided   (projector)
 :required   ((("apropos" apropos)
	       ("cl" cl)
	       ("dired-x" dired-x)
	       ("easymenu" easymenu)
	       ("emacs-core" files-x)
	       ("etags" etags)
	       ("find-dired" find-dired)
	       ("grep" grep)
	       ("ido" ido)
	       ("tramp" tramp)
	       ("vc" vc-hooks)))
 :keywords   ("project")
 :homepage   "http://gopher.ruricolist.com:70/lisp/"
 :commentary "\
Projector has the following features, which are the least I expect,
and the most I desire, from any implementation of the concept of a
project:

- It should work for large projects containing thousands of files.

- It should create and update tags tables automatically and in the
background. It should never wait for `tags-completion-table' to
refresh.

- It should never leave the project unless told to. Tags commands
should act on only one project at a time, and killed buffers should
be replaced with other buffers in the same project.

- It should support remote and read-only projects.

- It should be just as useful for reading code as for writing it.
That means a command to toggle the entire project read-only, for
convenient navigation using `view-mode'.

- It should perform file operations or shell commands on the entire
project or arbitrary subsets of the project. That means a command
to \"edit\" the entire project---every file in every directory---in a
single Dired buffer.

- It should navigate files, buffers, and tags interactively, with
completion.

- It should have macros in mind. That means commands to traverse
project files and project buffers in cyclic order.

- It should provide project-specific versions of familiar commands
whenever appropriate. That means version control in project, grep
in project, incremental search in project, listing buffers in
project, &c.

Usage:
(require 'projector)
(projector-mode 1)

Try `M-x apropos-projector' for a full list of commands.")
