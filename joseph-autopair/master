(:repository (git . "https://github.com/jixiuf/joseph-autopair.git")
 :created    "20110302"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Joseph" . "jixiuf@gmail.com"))
 :maintainer ("Joseph" . "jixiuf@gmail.com")
 :provided   (joseph-autopair)
 :keywords   ("autopair" "parentheses" "skeleton")
 :homepage   "https://github.com/jixiuf/joseph-autopair"
 :commentary "\
this package doesn't use skeleton or anything like this.
 it use `after-change-functions' hook.
 when your buffer changed(insert or delete) ,then
 `after-change-functions' is activated.
 So I can judge  whether need to insert some \"tail string\".
 for example:  for \"(\" the \"tail string\" is \")\".
 you needn't binding keys on parentheses or any paired character.
 just typing. so it is more sensitive.


 I also remaped:
 `delete-backward-char'
 `backward-delete-char-untabify'
 so that when you press `Backspace' between \"(\" and \")\"
 both \"(\" and \")\" is deleted.

 This is only enabled when the \"tail\" is `stringp'
 what is that means?
 because \"tail\" can be a `string' or a lisp sentence
 when it is a `string' , it will be inserted directly.
 when it is a lisp sentence ,it will be eval.
 see the default value of `joseph-autopair-alist'.

     `joseph-autopair-origin-backward-delete-char-untabify'
     `joseph-autopair-origin-delete-backward-char'
 are the original
 `backward-delete-char-untabify' `delete-backward-char'.


 Actually: 
 a pair like this in `joseph-autopair-alist':
                   (\"[\" \"]\")
  equals to:
                   (\"[\" (save-excursion (insert \"]\")))

 but a litter difference exists :
 when the \"tail\" is `stringp' then I can get the length of tail
 eazyly, so that I can delete or skip it depending
 on the length of \"tail\".
 that means only string type \"tail\" can be skipped
  and auto deleted .")
