(:summary    "Minibuffer completion incremental feedback"
 :created    "199303"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Ken Manheimer" . "klm@i.am"))
 :maintainer ("Ken Manheimer" . "klm@i.am")
 :provided   (icomplete)
 :keywords   ("help" "abbrev")
 :wikipage   "http://www.emacswiki.org/IcompleteMode"
 :commentary "\
Loading this package implements a more fine-grained minibuffer
completion feedback scheme.  Prospective completions are concisely
indicated within the minibuffer itself, with each successive
keystroke.

See `icomplete-completions' docstring for a description of the
icomplete display format.

See the `icomplete-minibuffer-setup-hook' docstring for a means to
customize icomplete setup for interoperation with other
minibuffer-oriented packages.

To activate icomplete mode, load the package and use the
`icomplete-mode' function.  You can subsequently deactivate it by
invoking the function icomplete-mode with a negative prefix-arg
(C-U -1 ESC-x icomplete-mode).  Also, you can prevent activation of
the mode during package load by first setting the variable
`icomplete-mode' to nil.  Icompletion can be enabled any time after
the package is loaded by invoking icomplete-mode without a prefix
arg.

Thanks to everyone for their suggestions for refinements of this
package.  I particularly have to credit Michael Cook, who
implemented an incremental completion style in his 'iswitch'
functions that served as a model for icomplete.  Some other
contributors: Noah Friedman (restructuring as minor mode), Colin
Rafferty (lemacs reconciliation), Lars Lindberg, RMS, and others.

klm.")
