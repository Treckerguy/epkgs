(:updated    "2004"
 :provided   (eform)
 :homepage   "http://www.emacswiki.org/ElectricFormMode"
 :wikipage   "http://www.emacswiki.org/ElectricFormMode"
 :commentary "\
I wrote this because I was keeping my cycling log as a text file in
emacs.  I want to do a few simple things like total up the number
of miles or number of hours I've ridden, but a full-blown
spreadsheet seems like overkill for this.  So I defined a simple
mark-up that instructs emacs to sum up the numbers in a certain
rectangle.  I also wanted to create sub-totals which were then
added together to produce a grand total, so there's also a facility
for adding up all of the subtotals matching some regexp.

I call this \"Electric Forms Mode\" because it functions sort of like
a web form where you fill in a few numbers and then they get
crunched into some sort of result, but the format is not so rigid
as a spreadsheet.

To install, you'll probably want this in your .emacs file:
(require 'eform)
And you might want something like this:
(global-set-key \"\\C-cu\" (lambda () (interactive) (eform-mode t) (eform-update)))

I'll explain the format with an example.  You have a file that
looks like this (without the semicolons):

    (#dist-jan  (#time-jan
1-1   11.1         0:38
1-2   15.3         1:01 
1-3    5.5         0:25
    #dist-jan)   #time-jan)

    (#dist-feb  (#time-feb
2-1   11.0         0:37
2-2   15.2         1:00 
2-3    5.4         0:24
    #dist-feb)   #time-feb)

SUBTOTALS
#dist-jan ()
#time-jan fhm + thm ()
#dist-feb ()
#time-feb fhm + thm ()

GRAND TOTALS
(dist-.*) #total-dist ()
(time-.*) #total-time ()


So, # identifies all the places where something interesting is
going to happen.  The (#name and #name) tags denote the beginning
and ending of rectangles that will be summed up.  #name ()
indicates where the result will go.  So, when you invoke enable
eform-mode and then invoke eform-update, this code will sum up all
the numbers in the rectangles demarcated by (#dist-jan and
#dist-jan) and then stick the result between the parenthesis on the
line #dist-jan ().

Consider the case of times.  I don't want to have to type in the
length of my rides using only minutes (ie, 90 minutes instead of
1:30).  Therefore you can specify a mapping function, a
reduction function, and a post-processing function on the line that
will hold the result of a computation.  These are fhm, +, and thm
above.  fhm takes a string of the form \"hour:min\" and converts it
to an integer number of minutes.  The function + is then used as a
binary \"reduction\" operator to combine all of the resulting
integers.  Finally thm is applied to the result.  It takes an
integer number of minutes and converts it to a string of the form
\"hour:minute\" which will be inserted back into the buffer between
the parenthesis on the \"result\" line #time-jan fhm + thm ()

Note that these functions under discussion are just plain old elisp
functions looked up by name.  So you can easily write your own
functions to massage your data as needed.

You don't have to specify all of the the map, reduction, and post
functions.  They default to string-to-number, +, and
number-to-string, respectively.  If you specify one, two, or three
function, then eform-mode takes a guess about what you mean as
follows: 
#name reduction () 
#name map reduction () 
#name map reduction post () 
ie, first you override the reduction function,
then the mapping function, and finally the postprocessing
function.

There's actually a fourth function you can specify which is a
preprocessing function.  It gets a crack at transforming the data
before anything else sees it.  This lets you write this:

(#name 1 2 3 4 #name) 
#name split string-to-number * number-to-string ()

Ie, all the data is on one line instead of being on separate lines.
The function split is defined below and it simply splits up the
data so that the other functions can do their work.  Here 24 will
appear between the parenthesis.

To summarize:
Function     Arg type          Result type   Default
preprocess   list of strings   list of A     identity
mapping      A                 B             string-to-number
reduction    B,B               C             +
postprocess  C                 string        number-to-string

where A, B, and C are any types.

Now, there's one final form of \"result\" line that lets you take the
results of previous calculations and use them somehow.  These are
the total-dist and total-time lines in the example above.  The set
of parenthesis on the left holds a regexp and the meaning of the
line is \"Look for all previous computations in the buffer with a
name matching regexp and operate on those results.\"  Everything
else is the same as the \"rectangle\" style of data input--you can
specify up to four functions, etc.

Now the documentation is getting as long as the code, so I'll stop.

If you actually get any use out of this, e-mail me.  Suggestions
are welcome.  This is my first crack at elisp, though, so be kind.  

To Do list for Version 2:
1) recalc until buffer stops changing.
2) use buffer local lisp variables for results of computations?
3) Figure out how to exclude open/close characters from .* regexp in result field
4) Clear all results function
5) Bug when total-d-dec starts with a d..")
