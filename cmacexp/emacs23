(:summary    "Expand C macros in a region"
 :created    "1992"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Francesco Potorti`" . "pot@gnu.org"))
 :maintainer ("Francesco Potorti`" . "pot@gnu.org")
 :adapted-by ("ESR")
 :provided   (cmacexp)
 :required   ((("cc-mode" cc-mode)))
 :keywords   ("c")
 :commentary "\
USAGE =============================================================

In C mode C-C C-e is bound to c-macro-expand.  The result of the
expansion is put in a separate buffer.  A user option allows the
window displaying the buffer to be optimally sized.

When called with a C-u prefix, c-macro-expand replaces the selected
region with the expansion.  Both the preprocessor name and the
initial flag can be set by the user.  If c-macro-prompt-flag is set
to a non-nil value the user is offered to change the options to the
preprocessor each time c-macro-expand is invoked.  Preprocessor
arguments default to the last ones entered.  If c-macro-prompt-flag
is nil, one must use M-x set-variable to set a different value for
c-macro-cppflags.

A c-macro-expansion function is provided for non-interactive use.

INSTALLATION ======================================================

Put the following in your ~/.emacs file.

If you want the *Macroexpansion* window to be not higher than
necessary:
(setq c-macro-shrink-window-flag t)

If you use a preprocessor other than /lib/cpp (be careful to set a
-C option or equivalent in order to make the preprocessor not to
strip the comments):
(setq c-macro-preprocessor \"gpp -C\")

If you often use a particular set of flags:
(setq c-macro-cppflags \"-I /usr/include/local -DDEBUG\"

If you want the \"Preprocessor arguments: \" prompt:
(setq c-macro-prompt-flag t)

BUG REPORTS =======================================================

Please report bugs, suggestions, complaints and so on to
pot@gnu.org (Francesco Potorti`).

IMPROVEMENTS OVER emacs 18.xx cmacexp.el ==========================

- A lot of user and programmer visible changes.  See above.
- #line directives are inserted, so __LINE__ and __FILE__ are
  correctly expanded.  Works even with START inside a string, a
  comment or a region #ifdef'd away by cpp. cpp is invoked with -C,
  making comments visible in the expansion.
- All work is done in core memory, no need for temporary files.

ACKNOWLEDGEMENTS ==================================================

A lot of thanks to Don Maszle who did a great work of testing, bug
reporting and suggestion of new features.  This work has been
partially inspired by Don Maszle and Jonathan Segal's.

BUGS ==============================================================

If the start point of the region is inside a macro definition the
macro expansion is often inaccurate.")
