(:summary    "Clickable text defined by regular expression, controlled by font-lock"
 :repository (git . "https://github.com/rolandwalker/button-lock.git")
 :created    "2011"
 :updated    "20110529"
 :authors    (("D Roland Walker" . "walker@pobox.com"))
 :maintainer ("D Roland Walker" . "walker@pobox.com")
 :provided   (button-lock wiki-nav)
 :required   ((("cl" cl)
	       ("emacs-core" font-lock)))
 :keywords   ("mouse" "button" "hyperlink")
 :homepage   "https://github.com/rolandwalker/button-lock"
 :wikipage   "http://www.emacswiki.org/ButtonLockMode"
 :commentary "\
Button-lock is a minor mode which provides simple facilities to
define clickable text based regular expressions.  Button-lock.el
piggybacks on font-lock.el, and is efficient.  Overlays are not
used.

Button-lock buttons (links) can execute any function.

See wiki-nav.el for a user-friendly library built on top of
button-lock.el.  Wiki-nav.el is available here:

   https://github.com/rolandwalker/button-lock

Example usage

   (require 'button-lock)
   (global-button-lock-mode 1)

   ; add a button to the current buffer
   (button-lock-set-button \"\\\\<print\\\\>\" 'beginning-of-line)

   ; to remove that button later, pass all the same arguments
   ; to button-lock-unset-button
   (button-lock-unset-button \"\\\\<print\\\\>\" 'beginning-of-line)

   ; or to remove the most recently added button
   (button-lock-pop-button)

   ; create a fancy raised button
   (button-lock-set-button \"print\" #'(lambda ()
                                       (interactive)
                                       (save-match-data
                                         (if (re-search-forward \"print\" nil t)
                                             (goto-char (match-beginning 0))
                                           (goto-char (point-min))
                                           (if (re-search-forward \"print\" nil t)
                                               (goto-char (match-beginning 0))))))
                           :face 'custom-button-face :mouse-face 'custom-button-mouse)

   ; activate hyperlinks
   (button-lock-set-button \"\\\\<http://[^[:space:]\\n]+\"
                           'browse-url-at-mouse
                           :face 'link :policy 'prepend)

   ; activate hyperlinks only in lines that begin with a comment character
   (button-lock-set-button \"^\\\\s-*\\\\s<.*?\\\\<\\\\(http://[^[:space:]\\n]+\\\\)\"
                           'browse-url-at-mouse
                           :face 'link :policy 'prepend :grouping 1)

   ; turn folding-mode delimiters into mouseable buttons
   (add-hook 'folding-mode-hook  #'(lambda ()
                                     (button-lock-mode 1)
                                     (button-lock-set-button
                                      (concat \"^\" (regexp-quote (car (folding-get-mode-marks))))
                                      'folding-toggle-show-hide)
                                     (button-lock-set-button
                                      (concat \"^\" (regexp-quote (cadr (folding-get-mode-marks))))
                                      'folding-toggle-show-hide)))

   ; create a button that responds to the keyboard, but not the mouse
   (button-lock-set-button \"\\\\<http://[^[:space:]\\n]+\"
                           'browse-url-at-point
                           :mouse-binding     nil
                           :mouse-face        nil
                           :face             'link
                           :face-policy      'prepend
                           :keyboard-binding \"RET\")

   ; define a global button, to be set whenever the minor mode is activated
   (button-lock-set-global-button '(\"\\\\<print\\\\>\" 'beginning-of-line))

See Also

   M-x customize-group RET button-lock RET

Prior Art

   hi-lock.el
   David M.  Koppelman <koppel@ece.lsu.edu>

   buttons.el
   Miles Bader <miles@gnu.org>

Notes

   By default, button-lock uses newfangled left-clicks rather than
   Emacs-traditional middle clicks.

   Font lock is very efficient, but it is still possible to bog
   things down if you feed it expensive regular expressions.  Use
   anchored expressions, and be careful about backtracking.  See
   `regexp-opt'.

   Some differences between button-lock.el and hi-lock.el:

      * The purpose of hi-lock.el is to change the _appearance_
        of keywords.  The purpose of button-lock is to change the
        _bindings_ on keywords.

      * Hi-lock also supports embedding new keywords in files,
        which is too risky of an approach for button-lock.

      * Hi-lock supports overlays and can work without font-lock.

   Some differences between button-lock.el and buttons.el

      * Buttons.el is for inserting individually defined
        buttons.  Button-lock.el is for changing all matching text
        into a button.

Compatibility

    Tested only on GNU Emacs version 23.x

Bugs

    Case-sensitivity of matches depends on how font-lock-defaults
    was called for the current mode (setting
    font-lock-keywords-case-fold-search).  So, it is safest to
    assume that button-lock pattern matches are case-sensistive --
    though they might not be.

    Return value for button-lock-set-global-button is inconsistent
    with button-lock-set-button.  The global function does not
    return a button which could be later passed to
    button-lock-extend-binding.  The other global functions are
    similarly inconsistent; they can only be depended on to return
    nil on failure.

    button-lock-mode gets activated twice for each buffer when
    global-button-lock-mode is on.

TODO

    Consider defining mode-wide button locks (pass the mode as the
    first argument of font-lock-add-keywords).  Could use functions
    named eg button-lock-set-mode-button.

    language-specific navigation library (header files in C, etc)

    example of exchanging text values on wheel event

    right-click menus

    button-down visual effects as with Emacs widgets

License

   Simplified BSD License

   Copyright (c) 2011, D Roland Walker
   All rights reserved.

   Redistribution and use in source and binary forms, with or
   without modification, are permitted provided that the following
   conditions are met:

      1. Redistributions of source code must retain the above
         copyright notice, this list of conditions and the following
         disclaimer.

      2. Redistributions in binary form must reproduce the above
         copyright notice, this list of conditions and the following
         disclaimer in the documentation and/or other materials
         provided with the distribution.

   This software is provided by D Roland Walker \"AS IS\" and any express
   or implied warranties, including, but not limited to, the implied
   warranties of merchantability and fitness for a particular
   purpose are disclaimed.  In no event shall D Roland Walker or
   contributors be liable for any direct, indirect, incidental,
   special, exemplary, or consequential damages (including, but not
   limited to, procurement of substitute goods or services; loss of
   use, data, or profits; or business interruption) however caused
   and on any theory of liability, whether in contract, strict
   liability, or tort (including negligence or otherwise) arising in
   any way out of the use of this software, even if advised of the
   possibility of such damage.

   The views and conclusions contained in the software and
   documentation are those of the authors and should not be
   interpreted as representing official policies, either expressed
   or implied, of D Roland Walker.")
