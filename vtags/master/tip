(:summary    "Tags facility for Emacs"
 :created    "1985"
 :updated    "2006"
 :license    "GPL-2"
 :authors    (("Edward Bishop"))
 :maintainer ("FSF")
 :provided   (etags regress)
 :required   ((("emacs" cl edebug ring)))
 :keywords   ("tools")
 :homepage   "https://savannah.gnu.org/projects/vtags"
 :wikipage   "http://www.emacswiki.org/VTags"
 :commentary "\
Changes from previous etags.el:


Added tags (as opposed to TAGS) functionality.
The code now has the ability to parse vi-style
tags tables generated by Exuberant Ctags.
By introduction of tags-get-tagfile-header and struct tagfileinfo, we have tried
to make the higher-level functions tag-type agnostic and non-buffer-centric. 
Many functions that used to assume that the TAGS file is in
the current buffer now take a tagfileinfo, or tfi, parameter. 

Changed the behavior of find-tag for multiple matches. Previously the user
could iterate through the matches one at a time. Now the user
is presented with all the matches at once in a buffer, similar 
to the way that completions, list-tags, or tags-apropos are handled.
Removed next-p in find-tag-internal, etc. Now find-tag-internal searches all tag files.

Deprecated the tag ring in favor of placeholders.
Placeholders navigation is more natural, allowing forward and back, 
similar to the way debuggers allow programmers to navigate up and down 
a call stack, or to the way browsers allow history navigation.

Ripped out cached completions, i.e. tags-completion-table.
These are not useful since they take forever to compute without a prefix
(and people almost never use completion without a prefix).

Eliminated tags-file-name. Users should use tags-table-list instead.
There were too many global variables tracking
the same or overlapping functionality.

Eliminated select-tags-table and all other references to tags-table-set-list.
There may be some merit to allowing the user to select a set of tags tables
from a list of sets, but it seems to me that the previous implementation
was too complicated, too rigid, and too poorly documented, and too implicitly
entangled with the rest of the tags functionality to be easily salvageable.
See Design Notes below.

Changed `tags-table-computed-list' to be a list of tagfileinfo.
Furthermore, all computation is done up front, files are visited
and includes are added to the list.

Removed 'button and 'apropos dependency, using vtags-mode instead.
We don't need all the features of button and apropos, and removing
them makes the code more portable and independent.

TODO implement vtags-tags-apropos; test etags-tags-apropos-additional
Or has this functionality been subsumed into find-tag?

TODO finish gtags integration

TODO fix comments

TODO remove unused functions and variables

TODO fix all TODO's

TODO debug allocation and garbage collection

TODO look at tinytag

TODO: This seems like a bug in previous version of etags-goto-tag-location: 
If use-explicit was used when
snarfing the tag-info then tag-text may not start at beginning of line.
Example: Try (list-tags \"gdb-6.3/include/elf/external.h\") and then 
         select Elf_External_Sym_Shndx from the list.
I commented out the (concat ... \"^\") and it seems to work.

TODO complete the encapsulation of the type-specific functions
There should be a clearly defined interface so that anyone who
wishes to add a new type of tags table can do so without changing
existing code.

BUGS


                       Design notes


               Efficiency vs platform independence

When processing files there are two essentially different strategies:

   1) read the file into a buffer and process it, or

   2) use the operating system (via shell-command or call-process)
      to process the file in place

(1) has the advantage of platform independence. It also makes available
the full power of the elisp libraries.

(2) often has the advantage of greater efficiency, but should only be used
when absolutely neccesary.

In this module we use a combination of (1) and (2). For example, when doing 
find-tag we follow strategy (1), reading some or all of the tag file into a 
buffer and then invoking elisp functions on that buffer. We could have
called findTag() from the ctags C library, but that would assume that the library
had been intalled on the system. 
   On the other hand, when doing list-tags on Ctags-generated tag files, we 
call (shell-command ...) to do some preliminary filtering and then invoke 
elisp code on a buffer containing the filtered output.

                      Tag Table Selection 

Previously, tag table selection was implict, disjointed, and inextricably interwoven
(via global/local variables, etc.) into the fabric of the code. The function
visit-tags-table-buffer was the focal point and jumping off point for most of it.

I have tried to identify and separate out those portions of the code that are for
table selection from the rest of the code. Unfortunately, I was unable to 
preserve all of the previous functionality. 

The current strategy is very simple:
User sets tags-table-list. (TODO propmpt user if not set).
The tags-table-computed-list is constructed by
stat'ing each file, checking for includes. This becomes the working list
for all tags functions. The concept of \"current table\" no longer exists.

Moving forward, it would be good to make table selection completely explicit 
and separate from the rest of the code. Strategies for selection should be 
easy to implement and easy for the user to select.

Selection criteria might include current buffer, operation, language,
or other criteria not yet considered.

Examples of table selection strategies, some of which appeared in visit-tags-table-buffer:
  * Use the current table
  * Use the current buffer-local table
  * Use the next table (by calling next-table-function)
  * Use the current list of tables
  * Use the current list of tables, but stop when a match is found. 
        (applies only to find-tag, not to tags-apropos).
  * Use only tables that have associated buffers.
  * Use only sorted tables.
  * Search up the directory tree from the current working directory for a 
    file named \"tags\" (from JonathanSimms entry in http://www.emacswiki.org/cgi-bin/wiki/EmacsTags).
    Similar to the global tags way of GTAG file selection.
  * Use the current table and any included tables (this is how tags-completion-table used to work).")
