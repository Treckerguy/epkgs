(:summary    "Template insertion"
 :created    "1998"
 :updated    "1999"
 :license    "GPL-2"
 :authors    (("Stefan Hornburg" . "racke@gundel.han.de"))
 :maintainer ("Stefan Hornburg" . "racke@gundel.han.de")
 :provided   (ginel-template)
 :required   ((("custom" custom)))
 :keywords   ("extensions" "languages" "tools")
 :homepage   "http://www.han.de/~racke/ginel"
 :commentary "\
* Introduction to Templates
Programmers and other text writers often use similar text chunks again
and again. Templates are better suited to these task than
cut-paste-modify-cycles. They consist of fixed text, intermixed with
variable parts, identified by special delimiters. The variable parts,
referenced as \"instructions\" in this document, are replaced by strings
like the current filename, the current user, and others interactively
queried from the user, fetched from variables or by functions.

* Emacs Lisp Template Processors
`ginel-template' is my personal approach for template processing.
Currently it offers not that much of functionality, but I hope it will
mature to be a really useful Emacs Lisp library. At the moment `tempo'
or `dmacro' will be a better choice for you if you're not really
adventurous or helpful.

* Setup
Ensure that this file (preferably byte-compiled) lives in a directory
within your `load-path' and add

    (require 'ginel-template)

to your Emacs init file (~/.emacs).

If you like, you could use `ginel-template-bindings' to define the
following global key bindings:

C-x t s       ginel-template-from-string
C-x t f       ginel-template-from-file
C-x t i       ginel-template-add-instruction
C-x t v       ginel-template-insert-value

* User functions
ginel-template-from-string STRING
 Processes the template STRING and inserts the result at point into
 the current buffer.
ginel-template-from-file FILE
 Reads the template from FILE, processes it and inserts the result at
 point into the current buffer.
ginel-template-add-instruction NAME VALUE
 Adds instruction NAME and instruction VALUE Lisp expression to the
 front of `ginel-template-instructions-alist'.
ginel-template-bindings
 Installs global key bindings for the other user functions.

* Instructions and directives
`ginel-template' scans the template for matches of
`ginel-template-wrapper-regexp' to detect instructions.
Each instruction is examined for directives. If an value can be
determined for an instruction, `ginel-template' replaces
the instruction and the corresponding delimiters with the value.
Otherwise the instruction will be left alone.

(ginel-template-from-string \"prefix = @prefix@\")
    -| prefix = @prefix@

** The Query Directive
The pattern for the query directive is `ginel-template-query-regexp',
a leading `>' sign by default. The query directive instructs
`ginel-template' to ask the user if the value for an instruction cannot
be determined by other means.

(ginel-template-from-string \"Greetings from @>country@\")
Value for country: greece
    -| Greetings from greece

** The Massage Directive
The pattern for the massage directive is `ginel-template-massage-regexp',
a trailing string preceded by the `&' sign by default. The massage
directive instructs `ginel-template' to apply the function given by
the first submatch to the instruction value before inserting.

(add-to-list 'ginel-template-instructions-alist '(\"nickname\" . \"racke\"))
(ginel-template-from-string \"My nickname is @nickname&capitalize@ !\")
    -| My nickname is Racke !

** Instruction values
`ginel-template' tries to find the value in the following order:

1) searches the cache for instruction values for this template
   (results of user queries are stored there)
2) searches the association list `ginel-template-instructions-alist'
   for a value (see below)
3) queries the user if the instruction comes with a query directive

*** Predefined values
`ginel-template' generates instruction values as specified by
`ginel-template-instructions-alist' dynamically:

o lists are evaluated as lisp expressions for the value
o strings are used literally as value
o symbols provide their symbol value

`ginel-template-instructions-alist' defines values for the following
instructions:

address
    the value of `user-mail-address'
basename
    buffer's file name without its directory and last suffix,
    e.g. \"ginel-template\" for this file
changelogcap
    a change log entry header, as generated by `add-change-log-entry'
copyright
    a copyright notice, like `Copyright (C) 1998 Stefan Hornburg'
file
    buffer's file name without its directory, e.g. \"ginel-template.el\"
    for this file
fullname
    full name of the user logged in
loginname
    user's name
snapshot
    version number for snapshots, e.g. \"19990112\"
system
    name of machine, e.g. \"gundel.han.de\"
suffix
    extension of buffer's file name, e.g. \"el\" for this file
year
    the current year, e.g. \"1998\"

(ginel-template-from-string \";; Copyright (C) @year@ @fullname@\")
    -| ;; Copyright (C) 1998 Stefan Hornburg

* Selected User Options
ginel-template-directory
 Default directory used by `ginel-template-from-file' when invoked
 interactively.

* Other Useful Variables
ginel-template-inserted-region
 `ginel-template-from-...' and `ginel-template-insert-value'
  record (begin and end) of the inserted region in this variable.
  This allows for further processing of the inserted region.")
