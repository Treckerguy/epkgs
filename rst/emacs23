(:summary    "Mode for viewing and editing reStructuredText-documents"
 :created    "2003"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Martin Blais" . "blais@furius.ca")
	      ("Stefan Merten" . "smerten@oekonux.de")
	      ("David Goodger" . "goodger@python.org"))
 :maintainer ("Martin Blais" . "blais@furius.ca")
 :provided   (rst)
 :required   ((("cl" cl)
	       ("compile" compile)
	       ("emacs-core" font-lock)))
 :commentary "\
This package provides major mode rst-mode, which supports documents marked up
using the reStructuredText format.  Support includes font locking as well as
some convenience functions for editing.  It does this by defining a Emacs
major mode: rst-mode (ReST).  This mode is derived from text-mode (and
inherits much of it).  This package also contains:

- Functions to automatically adjust and cycle the section underline
  decorations;
- A mode that displays the table of contents and allows you to jump anywhere
  from it;
- Functions to insert and automatically update a TOC in your source
  document;
- Font-lock highlighting of notable reStructuredText structures;
- Some other convenience functions.

See the accompanying document in the docutils documentation about
the contents of this package and how to use it.

For more information about reStructuredText, see
http://docutils.sourceforge.net/rst.html

For full details on how to use the contents of this file, see
http://docutils.sourceforge.net/docs/user/emacs.html


There are a number of convenient keybindings provided by rst-mode.
The main one is

   C-c C-a (also C-=): rst-adjust

Updates or rotates the section title around point or promotes/demotes the
decorations within the region (see full details below).  Note that C-= is a
good binding, since it allows you to specify a negative arg easily with C--
C-= (easy to type), as well as ordinary prefix arg with C-u C-=.

For more on bindings, see rst-mode-map below.  There are also many variables
that can be customized, look for defcustom and defvar in this file.

If you use the table-of-contents feature, you may want to add a hook to
update the TOC automatically everytime you adjust a section title::

  (add-hook 'rst-adjust-hook 'rst-toc-update)

Syntax highlighting: font-lock is enabled by default.  If you want to turn
off syntax highlighting to rst-mode, you can use the following::

  (setq font-lock-global-modes '(not rst-mode ...))


CUSTOMIZATION

rst
---
This group contains some general customizable features.

The group is contained in the wp group.

rst-faces
---------
This group contains all necessary for customizing fonts.  The default
settings use standard font-lock-*-face's so if you set these to your
liking they are probably good in rst-mode also.

The group is contained in the faces group as well as in the rst group.

rst-faces-defaults
------------------
This group contains all necessary for customizing the default fonts used for
section title faces.

The general idea for section title faces is to have a non-default background
but do not change the background.  The section level is shown by the
lightness of the background color.  If you like this general idea of
generating faces for section titles but do not like the details this group
is the point where you can customize the details.  If you do not like the
general idea, however, you should customize the faces used in
rst-adornment-faces-alist.

Note: If you are using a dark background please make sure the variable
frame-background-mode is set to the symbol dark.  This triggers
some default values which are probably right for you.

The group is contained in the rst-faces group.

All customizable features have a comment explaining their meaning.
Refer to the customization of your Emacs (try ``M-x customize``).


DOWNLOAD

The latest version of this file lies in the docutils source code repository:
  http://svn.berlios.de/svnroot/repos/docutils/trunk/docutils/tools/editors/emacs/rst.el


INSTALLATION

Add the following lines to your `.emacs' file:

  (require 'rst)

If you are using `.txt' as a standard extension for reST files as
http://docutils.sourceforge.net/FAQ.html#what-s-the-standard-filename-extension-for-a-restructuredtext-file
suggests you may use one of the `Local Variables in Files' mechanism Emacs
provides to set the major mode automatically.  For instance you may use::

   .. -*- mode: rst -*-

in the very first line of your file.  The following code is useful if you
want automatically enter rst-mode from any file with compatible extensions:

(setq auto-mode-alist
      (append '((\"\\\\.txt$\" . rst-mode)
                (\"\\\\.rst$\" . rst-mode)
                (\"\\\\.rest$\" . rst-mode)) auto-mode-alist))


BUGS

- rst-enumeration-region: Select a single paragraph, with the top at one
  blank line before the beginning, and it will fail.
- The active region goes away when we shift it left or right, and this
  prevents us from refilling it automatically when shifting many times.
- The suggested decorations when adjusting should not have to cycle
  below one below the last section decoration level preceding the
  cursor.  We need to fix that.

TODO LIST

rst-toc-insert features
------------------------
- rst-toc-insert: We should parse the contents:: options to figure out how
  deep to render the inserted TOC.
- On load, detect any existing TOCs and set the properties for links.
- TOC insertion should have an option to add empty lines.
- TOC insertion should deal with multiple lines.
- There is a bug on redo after undo of adjust when rst-adjust-hook uses the
  automatic toc update.  The cursor ends up in the TOC and this is
  annoying.  Gotta fix that.
- numbering: automatically detect if we have a section-numbering directive in
  the corresponding section, to render the toc.

bulleted and enumerated list items
----------------------------------
- We need to provide way to rebullet bulleted lists, and that would include
  automatic enumeration as well.

Other
-----
- It would be nice to differentiate between text files using
  reStructuredText_ and other general text files.  If we had a
  function to automatically guess whether a .txt file is following the
  reStructuredText_ conventions, we could trigger rst-mode without
  having to hard-code this in every text file, nor forcing the user to
  add a local mode variable at the top of the file.
  We could perform this guessing by searching for a valid decoration
  at the top of the document or searching for reStructuredText_
  directives further on.

- We should support imenu in our major mode, with the menu filled with the
  section titles (this should be really easy).

- We should rename \"adornment\" to \"decoration\" or vice-versa in this
  document (Stefan's code (\"adornment\") vs Martin (\"decoration\")), maybe some
  functions even overlap.

- We need to automatically recenter on rst-forward-section movement commands.


HISTORY")
