(:summary    "A mode for editing Visual Basic .NET programs"
 :created    "1996"
 :updated    "2011"
 :license    "GPL-2"
 :authors    (("Fred White" . "fwhite@alum.mit.edu")
	      (nil . "d.love@dl.ac.uk")
	      (nil . "kevin.whitefoot@nopow.abb.no")
	      (nil . "dpchiesa@hotmail.com"))
 :maintainer ("Fred White" . "fwhite@alum.mit.edu")
 :provided   (vbnet-mode)
 :keywords   ("languages" "basic" "vb" "vbnet")
 :homepage   "http://www.emacswiki.org/VbDotNetMode"
 :wikipage   "http://www.emacswiki.org/VbDotNetMode"
 :commentary "\
Purpose of this package: This is a mode for editing programs written
  in Visual Basic .NET (VB.NET).  This mode features automatic
  indentation, font locking, keyword capitalization, integration with
  compile.el, integration with flymake.el, integration with
  ya-snippet.el, and some minor convenience functions.

Installation instructions

 Put vbnet-mode.el somewhere in your load path, optionally compile
 it, and add the following to your .emacs file:

   (autoload 'vbnet-mode \"vbnet-mode\" \"Mode for editing VB.NET code.\" t)
   (setq auto-mode-alist (append '((\"\\\\.\\\\(frm\\\\|bas\\\\|cls\\\\|vb\\\\)$\" .
                                 vbnet-mode)) auto-mode-alist))

 And optionally, add something like this to your .emacs file as well:

   (defun my-vbnet-mode-fn ()
     \"My hook for VB.NET mode\"
     (interactive)
     ;; This is an example only.
     ;; These statements are not required to use VB.NET, but
     ;; you might like them.
     (turn-on-font-lock)
     (turn-on-auto-revert-mode)
     (setq indent-tabs-mode nil)
     (require 'flymake)
     (flymake-mode 1)
     ...other mode-setup code here...
   )
   (add-hook 'vbnet-mode-hook 'my-vbnet-mode-fn)


Revisions:
1.0 18-Apr-96  Initial version

1.1 Accomodate emacs 19.29+ font-lock-defaults
    Simon Marshall <Simon.Marshall@esrin.esa.it>

1.2 Rename to visual-basic-mode

1.3 Fix some indentation bugs.

1.3+ Changes by Dave Love: [No attempt at compatibility with
     anything other than Emacs 20, sorry, but little attempt to
     sanitize for Emacs 20 specifically.]
     Change `_' syntax only for font-lock and imenu, not generally;
     provide levels of font-locking in the current fashion;
     font-lock case-insensitively; use regexp-opt with the font-lock
     keywords; imenu support; `visual-basic-split-line', bound to
     C-M-j; account for single-statement `if' in indentation; add
     keyword \"Global\"; use local-write-file-hooks, not
     write-file-hooks.

1.4 September 1998

1.4 KJW Add begin..end, add extra keywords
    Add customisation for single line if.  Disallow by default.
    Fix if regexp to require whitespace after if and require then.
    Add more VB keywords.  Make begin..end work as if..endif so
    that forms are formatted correctly.

1.4.1 KJW Merged Dave Love and KJW versions.
    Added keywords suggested by Mickey Ferguson
    <MFerguson@peinc.com>
    Fixed imenu variable to find private variables and enums

    Changed syntax class of =, <, > to punctuation to allow dynamic
    abbreviations to pick up only the word at point rather than the
    whole expression.

    Fixed bug introduced by KJW adding suport for begin...end in
    forms whereby a single end outdented.

    Partially fixed failure to recognise if statements with
    continuations (still fails on 'single line' if with
    continuation, ugh).

1.5 DPC changes February 2011
    Moved the `provide' statement to conventional spot, end of file.

    Modified various `defvar' statements to be `defcustom',
    to allow these settings to be customized interactively.

    Changed modeline label to the more concise \"VB.NET\", instead of
    \"Visual Basic .NET\"

    Tweaked the `vbnet-continuation-regexp' slightly nto be more
    correct. It needed a space before the continuation char.

    Fixed `vbnet-defun-start-regexp' to handle Public Shared Functions.
    Also renamed it to `vbnet-block-start-regexp' to reflect its
    true meaning, and renamed `vbnet-defun-end-regexp' similarly.

    Put all the defconst regexps into an alist for simpler access.

    Added \"Namespace\" as a keyword, and added a regexp and fn for
    handling namespace statements. Also modified `vbnet-calculate-indent'
    to properly handle namespaces and their children.

    Enhanced the logic for fontifying, with changes to
    `vbnet-font-lock-keywords-1', so that things like variables,
    constructor invocation, import declarations, and using statements
    get fontified.

    Removed keyword fontification of String, Trim, etc.  In VB.NET,
    these are no longer keywords. The whole list of keywords needs a
    thorough going-over. I think it is no longer necessary with
    VB.NET, which has many fewer keywords.

    Implemented indenting of VB.NET properties, getters and setters.

    Integration with compile.el . VBnet-mode now installs an error
    regexp for vbc.exe into `compilation-error-regexp-alist-alist',
    which allows next-error to navigate to the next compile error in
    the vb buffer.

    Integration with ya-snippet.el . Defines some built-in
    snippets for convenience.  This works only if ya-snippet is available.
    The builtin snippets will not overwrite snippets defined
    in the normal way with ya-snippet (in a compiled bundle).
    See also the var, `vbnet-want-fixup-yasnippet'.

    Integration with flymake.el .  Tweaks some defuns
    and vars to allow flymake to work with VB.NET. This happens only
    if flymake is in use. See also the var, `vbnet-want-fixup-flymake'.

    Removed the find-matching-* fns, they were simple and called
    from only one place, so added nothing.

    New function, `vbnet-join-continued-lines', a companion to
    `vbnet-split-line' Also, fixed the latter to work in an edge
    case.


Notes by Dave Love
BTW, here's a script for making tags tables that I (Dave Love) have
used with reasonable success.  It assumes a hacked version of etags
with support for case-folded regexps.  I think this is now in the
development version at <URL:ftp://fly.cnuce.cnr.it/pub/> and should
make it into Emacs after 20.4.

#! /bin/sh

# etags-vb: (so-called) Visual (so-called) Basic TAGS generation.
# Dave Love <d.love@dl.ac.uk>.  Public domain.
# 1997-11-21

if [ $# -lt 1 ]; then
    echo \"Usage: `basename $0` [etags options] VBfile ... [etags options] \" 1>&2
    exit 1
fi

if [ $1 = \"--help\" ] || [ $1 = \"-h\" ]; then
    echo \"Usage: `basename $0` [etags options] VBfile ... [etags options]

\"
    etags --help
fi

exec etags --lang=none -c '/\\(global\\|public\\)[ \\t]+\\(\\(const\\|type\\)[ \\t]+\\)*\\([a-z_0-9]+\\)/\\4/' \\
    -c '/public[ \\t]+\\(sub\\|function\\)[ \\t]+\\([a-z_0-9]+\\)/\\2/' \\
  \"$@\"

End Notes Dave Love


Known bugs:

 - Doesn't know about \":\" separated stmts.

 - Doesn't recognize single line if statements if these are broken by
   line continuation characters. (not sure what this means; if I did
   I would try to fix it.  -DPC 2011/Feb/26)


todo?:

 fwd/back-compound-statement

 smart completion over object fields, methods, and properties.

 IDE integration

 Change behaviour of ESC-q to recognise words used as paragraph
 titles and prevent them being dragged into the previous
 paragraph.

 etc.")
