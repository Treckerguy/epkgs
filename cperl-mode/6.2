(:summary    "Perl code editing commands for Emacs"
 :repository (git . "git://github.com/jrockway/cperl-mode.git")
 :created    "1985"
 :updated    "20080414"
 :license    "GPL-2"
 :authors    (("Ilya Zakharevich and Bob Olson"))
 :maintainer ("Ilya Zakharevich" . "ilyaz@cpan.org")
 :provided   (cperl-mode)
 :required   ((("cl" cl)
	       ("edebug" edebug)
	       ("emacs" custom easymenu font-lock)
	       ("etags" etags)
	       ("gud" gud)
	       ("imenu" imenu)
	       ("info" info)
	       ("man" man)
	       ("mode-compile" mode-compile)
	       ("ps-print" ps-print)
	       ("tmm" tmm)))
 :keywords   (languages perl)
 :homepage   "https://github.com/jrockway/cperl-mode"
 :wikipage   "http://www.emacswiki.org/CPerlMode"
 :commentary "\
$Id: cperl-mode.el,v 6.2 2008/04/14 23:14:52 vera Exp vera $

If your Emacs does not default to `cperl-mode' on Perl files:
To use this mode put the following into
your .emacs file:

(autoload 'perl-mode \"cperl-mode\" \"alternate mode for editing Perl programs\" t)

You can either fine-tune the bells and whistles of this mode or
bulk enable them by putting

(setq cperl-hairy t)

in your .emacs file.  (Emacs rulers do not consider it politically
correct to make whistles enabled by default.)

DO NOT FORGET to read micro-docs (available from `Perl' menu)   <<<<<<
or as help on variables `cperl-tips', `cperl-problems',         <<<<<<
`cperl-non-problems', `cperl-praise', `cperl-speed'.            <<<<<<

Note also that there are \"authoritative\" version of this file  <<<<<<
(available on http://ilyaz.org/software/emacs/), and versions  <<<<<<
\"customized\" for a particular Emacs distribution by Emacs      <<<<<<
maintainers themselves.  As expected, the \"authoritative\"      <<<<<<
version is known to be much less buggy.  Usually the           <<<<<<
maintainers add a verbiage after numbers in `cperl-version'.   <<<<<<

Additional useful commands to put into your .emacs file (before
RMS Emacs 20.3):

(setq auto-mode-alist
     (append '((\"\\\\.\\\\([pP][Llm]\\\\|al\\\\)$\" . perl-mode))  auto-mode-alist ))
(setq interpreter-mode-alist (append interpreter-mode-alist
				        '((\"miniperl\" . perl-mode))))

The mode information (on C-h m) provides some customization help.
If you use font-lock feature of this mode, it is advisable to use
either lazy-lock-mode or fast-lock-mode.  I prefer lazy-lock.

Faces used now: three faces for first-class and second-class keywords
and control flow words, one for each: comments, string, labels,
functions definitions and packages, arrays, hashes, and variable
definitions.  If you do not see all these faces, your font-lock does
not define them, so you need to define them manually.
Maybe you have an obsolete font-lock from 19.28 or earlier.  Upgrade.

If you have a grayscale monitor, and do not have the variable
font-lock-display-type bound to 'grayscale, insert

(setq font-lock-display-type 'grayscale)

into your .emacs file (this is relevant before RMS Emacs 20).

This mode supports font-lock, imenu and mode-compile.  In the
hairy version font-lock is on, but you should activate imenu
yourself (note that mode-compile is not standard yet).  Well, you
can use imenu from keyboard anyway (M-x imenu), but it is better
to bind it like that:

(define-key global-map [M-S-down-mouse-3] 'imenu)

Font lock bugs as of v4.32:

The following kinds of Perl code erroneously start strings:
\\$`  \\$'  \\$\"
$opt::s  $opt_s  $opt{s}  (s => ...)  /\\s+.../
likewise with m, tr, y, q, qX instead of s

In fact the version of font-lock that this version supports can be
much newer than the version you actually have. This means that a
lot of faces can be set up, but are not visible on your screen
since the coloring rules for this faces are not defined.

Updates: ========================================

Made less hairy by default: parentheses not electric,
linefeed not magic. Bug with abbrev-mode corrected.")
