(:summary    "Find files in a project quickly"
 :repository (git . "https://github.com/technomancy/find-file-in-project.git")
 :created    "20080318"
 :updated    "2009"
 :license    "GPL-3"
 :authors    (("Phil Hagelberg, Doug Alcorn, and Will Farrington"))
 :maintainer ("Phil Hagelberg, Doug Alcorn, and Will Farrington")
 :provided   (find-file-in-project)
 :keywords   ("convenience" "project")
 :homepage   "https://github.com/technomancy/find-file-in-project"
 :wikipage   "http://www.emacswiki.org/FindFileInProject"
 :commentary "\
This library depends on GNU find.

This file provides a couple methods for quickly finding any file in
a given project. Projects are defined in two ways. The first uses
`locate-dominating-file'. First, if the `locate-dominating-file'
function is bound, it assumes you are using Emacs 23, in which case
you it will look for a `.dir-locals.el' file in an ancestor
directory of the current file. Otherwise it uses the
`project-local-variables' library, which looks for a `.emacs-project'
file.

The other method takes advantage of the prominence of version
control systems in projects to quickly identify the tree for a
project. It does so using `project.el' when available. `project.el'
is shipped in this tree, but for reasons of encouraging using
default Emacs behavior when and where possible, you will need to
manually require it in your Emacs configuration to make use of it.

By default, it looks only for files whose names match
`ffip-regexp', but it's understood that that variable will be
overridden locally. This can be done either with a mode hook:

(add-hook 'emacs-lisp-mode-hook
          (lambda (set (make-local-variable 'ffip-regexp) \".*\\\\.el\")))

or by setting it in your .emacs-project/.dir-settings.el file, in
which case it will get set locally.

You can also be a bit more specific about what files you want to
find. For instance, in a Ruby on Rails project, you may be
interested in all .rb files that don't exist in the \"vendor\"
directory. In that case you could locally set `ffip-find-options'
to \"\" from within a hook or your .emacs-project file. The options
accepted in that variable are passed directly to the Unix `find'
command, so any valid arguments for that program are acceptable.

If `ido-mode' is enabled, the menu will use `ido-completing-read'
instead of `completing-read'.

Recommended binding:
(global-set-key (kbd \"C-x C-M-f\") 'find-file-in-project)")
