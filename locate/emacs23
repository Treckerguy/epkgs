(:summary    "Interface to the locate command"
 :created    "1996"
 :updated    "2011"
 :license    "GPL-3"
 :authors    (("Peter Breton" . "pbreton@cs.umb.edu"))
 :maintainer ("Peter Breton" . "pbreton@cs.umb.edu")
 :provided   (locate)
 :required   ((("dired" dired)))
 :keywords   ("files" "unix")
 :wikipage   "http://www.emacswiki.org/LocateMode"
 :commentary "\
Search a database of files and use dired commands on the result.

Locate.el provides an interface to a program which searches a
database of file names. By default, this program is the GNU locate
command, but it could also be the BSD-style find command, or even a
user specified command.

To use the BSD-style \"fast find\", or any other shell command of the
form

  SHELLPROGRAM  Name-to-find

set the variable `locate-command' in your .emacs file.

  To use a more complicated expression, create a function which
takes a string (the name to find) as input and returns a list.
The first element should be the command to be executed, the remaining
elements should be the arguments (including the name to find). Then put

(setq locate-make-command-line 'my-locate-command-line)

in your .emacs, using the name of your function in place of
my-locate-command-line.

You should make sure that whichever command you use works correctly
from a shell prompt. GNU locate and BSD find expect the file databases
to either be in standard places or located via environment variables.
If the latter, make sure these environment variables are set in
your emacs process.

Locate-mode assumes that each line output from the locate-command
consists exactly of a file name, possibly preceded or trailed by
whitespace. If your file database has other information on the line (for
example, the file size), you will need to redefine the function
`locate-get-file-positions' to return a list consisting of the first
character in the file name and the last character in the file name.

To use locate-mode, simply type M-x locate and then the string
you wish to find. You can use almost all of the dired commands in
the resulting *Locate* buffer.  It is worth noting that your commands
do not, of course, affect the file database. For example, if you
compress a file in the locate buffer, the actual file will be
compressed, but the entry in the file database will not be
affected. Consequently, the database and the filesystem will be out
of sync until the next time the database is updated.

The command `locate-with-filter' keeps only lines matching a
regular expression; this is often useful to constrain a big search.")
